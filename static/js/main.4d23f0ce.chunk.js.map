{"version":3,"sources":["Api/api.js","Api/list.js","components/Dictionary.jsx","components/Header.jsx","App.jsx","serviceWorkerRegistration.js","index.js"],"names":["dictionaryApi","lan","word","categories","value","label","Dictionary","setLan","setWord","styles","createStyles","Container","maxWidth","className","container","TextField","color","onChange","e","target","search","select","handleChange","mode","map","cat","MenuItem","makeStyles","marginTop","display","marginRight","flex","width","search_key","fontSize","Header","settoggleDark","toggleDark","createStyle","AppBar","header","position","Toolbar","Typography","variant","title","Button","button","onClick","changeTheme","flexDirection","height","alignItems","fontWeight","Definitions","lazy","App","useState","meanings","setMeanings","useEffect","wordMeaning","darkTheme","createTheme","palette","type","primary","main","secondary","ThemeProvider","theme","x","style","background","fallback","a","axios","get","data","padding","minHeight","paddingBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4d23f0ce.chunk.js","sourcesContent":["export default function dictionaryApi(lan,word){\r\n    return `https://api.dictionaryapi.dev/api/v2/entries/${lan}/${word}`\r\n}","const categories = [\r\n    { value: \"English\", label: \"en\" },\r\n    { value: \"Hindi\", label: \"hi\" },\r\n    { value: \"Spanish\", label: \"es\" },\r\n    { value: \"French\", label: \"fr\" },\r\n    { value: \"Japanese\", label: \"ja\" },\r\n    { value: \"Russian\", label: \"ru\" },\r\n    { value: \"German\", label: \"de\" },\r\n    { value: \"Italian\", label: \"it\" },\r\n    { value: \"Korean\", label: \"ko\" },\r\n    { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\r\n    { value: \"Arabic\", label: \"ar\" },\r\n    { value: \"Turkish\", label: \"tr\" },\r\n  ];\r\n\r\n  export default categories;","import { Container, makeStyles, MenuItem, TextField } from \"@material-ui/core\";\r\nimport categories from \"../Api/list\";\r\n\r\nexport default function Dictionary({lan, setLan, word, setWord}){\r\n\r\n    const styles = createStyles()\r\n\r\n    function handleChange(e){\r\n        setLan(e.target.value)\r\n        setWord('')\r\n    }\r\n\r\n    return(\r\n        <Container maxWidth='lg'  className={styles.container}>\r\n            <TextField label='type a word' color='secondary' value={word} onChange={(e)=>setWord(e.target.value)} className={styles.search}/>\r\n\r\n            <TextField label='select' select value={lan} onChange={(e)=>handleChange(e)} className={styles.mode}>\r\n                { categories.map(cat=>(<MenuItem key={cat.label} value={cat.label}>{cat.value}</MenuItem>)) }\r\n            </TextField>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst createStyles = makeStyles(()=>({\r\n    container:{\r\n        marginTop:'3rem',\r\n        display:'flex'\r\n    },\r\n    search:{\r\n        marginRight:'1rem',\r\n        flex:'1'\r\n    },\r\n    mode:{\r\n        width:'clamp(6rem,7rem,7vw)'\r\n    },\r\n    search_key:{\r\n        marginTop:'2rem',\r\n        fontSize:'clamp(1.6rem,1.7rem,1.7vw)'\r\n    }\r\n}))","import { AppBar, Button, Container, Toolbar, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/styles\"\r\n\r\nexport default function Header({settoggleDark, toggleDark}){\r\n    function changeTheme(settoggleDark){\r\n        settoggleDark(!toggleDark)\r\n    }\r\n\r\n    const styles = createStyle()\r\n\r\n    return(\r\n        <AppBar className={styles.header} position='static'>\r\n            <Container>\r\n                <Toolbar>\r\n                    <Typography variant='h3' className={styles.title} >Dictionary</Typography>\r\n\r\n                    <Button variant='outlined' className={styles.button} onClick={()=>changeTheme(settoggleDark)}>\r\n                        {toggleDark ? 'Light Mode' : 'Dark Moment'}\r\n                    </Button>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n\r\nconst createStyle = makeStyles(()=>({\r\n    header:{\r\n        width:'100%',\r\n        flexDirection:'row',\r\n        height:'5rem',\r\n        alignItems:'center',\r\n    },\r\n    title:{\r\n        flex:1,\r\n        fontWeight:'200'\r\n    },\r\n    button:{\r\n        height:'2rem'\r\n    }\r\n}))","import {lazy, Suspense} from 'react'\r\nimport { Container, createTheme, Typography } from \"@material-ui/core\"\r\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\"\r\nimport axios from \"axios\"\r\nimport { useEffect, useState } from \"react\"\r\nimport dictionaryApi from \"./Api/api\"\r\nimport Dictionary from \"./components/Dictionary\"\r\nimport Header from \"./components/Header\"\r\nimport \"./styles/index.css\"\r\n\r\nconst Definitions = lazy(()=>import(\"./components/Definitions\"))\r\n\r\nexport default function App(){\r\n    const [toggleDark, settoggleDark] = useState(true);\r\n\r\n    const [meanings, setMeanings] = useState([])\r\n    const [word, setWord] = useState('')\r\n    const [lan, setLan] = useState('en')\r\n\r\n    useEffect(()=>wordMeaning(lan,word,setMeanings),[word,lan])\r\n\r\n\r\n    const darkTheme = createTheme({\r\n        palette:{\r\n            type: toggleDark ? 'dark' : 'light',\r\n            primary:{\r\n                main:toggleDark ? '#101517' : '#fff',\r\n            },\r\n            secondary: {\r\n                main:toggleDark ? '#fff' : '#101317'\r\n            },\r\n            button:{\r\n                main: toggleDark ? '#fff' : '#000'\r\n            }\r\n          }\r\n        })\r\n\r\n    const styles = createStyles()\r\n\r\n    return(\r\n        <>\r\n        <ThemeProvider theme={darkTheme}>\r\n            <div  className={styles.x} style={{width:'100%',background:toggleDark? '#101317' : '#fff'}}>\r\n                <Container className={styles.container}>\r\n                    <Header settoggleDark={settoggleDark} toggleDark={toggleDark}/>\r\n\r\n                    <Dictionary lan={lan} setLan={setLan} word={word} setWord={setWord}/>\r\n\r\n                    { meanings && <Suspense fallback={<h1>loading...</h1>}><Definitions meanings={meanings} word={word} lan={lan}/></Suspense> }\r\n\r\n                    { !meanings && <Typography variant='h3'>no result found.</Typography>}\r\n                </Container>\r\n            </div>\r\n        </ThemeProvider>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nasync function wordMeaning(lan, word, setMeanings){\r\n    try{\r\n        if(!lan || !word) return\r\n        const {data} = await axios.get(dictionaryApi(lan, word))\r\n        if(!data) {setMeanings(''); return}\r\n        setMeanings(data)\r\n    }catch(e){\r\n        setMeanings('')\r\n    }\r\n}\r\n\r\nconst createStyles = makeStyles(()=>({\r\n    container:{\r\n        width:'100% !important',\r\n        maxWidth:'100% !important',\r\n        padding:0,\r\n    },\r\n    x:{\r\n        minHeight:'100vh',\r\n        paddingBottom:'3rem'\r\n    }\r\n}))","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n\r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n\r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n\r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n\r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}